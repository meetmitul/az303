name: Branch Deleted
on: delete
jobs:
  delete:
#    if: github.event.ref_type == 'branch'
    name: 'DestroyEnvironment'
    runs-on: ubuntu-latest
    environment: 
      name: Adhoc 
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Update environmetn if Adhoc
      run: |
        echo "This is adhoc environment"
        echo "Branch name is ${GITHUB_REF#refs/heads/}"

        PROJECTCODE=$(echo ${{ github.event.ref }} | cut -d'-' -f 1)
        echo "Project code  is $PROJECTCODE"
        echo "environment_name=$PROJECTCODE" >> $GITHUB_ENV
        echo "Environ now is ${{env.environment_name}}"
              
    - name: Install Terraform
      id: terraformPlanStep
      working-directory: Application/Terraform/
      run: |
          echo "Install Terraform"
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform
          echo "Enviornment is ${{env.environment_name}}"
          
    - name: Init Terraform
      working-directory: Application/Terraform/
      run: |
          echo "Init Terraform"
          export ARM_CLIENT_ID=${{secrets.AZ_CLIENTID}}
          export ARM_CLIENT_SECRET=${{secrets.AZ_CLIENTSECRET}}
          export ARM_SUBSCRIPTION_ID=${{secrets.AZ_SUBSCRIPTIONID}}
          export ARM_TENANT_ID=${{secrets.AZ_TENANTID}}
          terraform init -input=false
          
    - name: Switch workspace if needed
      working-directory: Application/Terraform/
      run: |
          echo "Switch workspace Terraform"
          export ARM_CLIENT_ID=${{secrets.AZ_CLIENTID}}
          export ARM_CLIENT_SECRET=${{secrets.AZ_CLIENTSECRET}}
          export ARM_SUBSCRIPTION_ID=${{secrets.AZ_SUBSCRIPTIONID}}
          export ARM_TENANT_ID=${{secrets.AZ_TENANTID}}
          echo "Enviornment is ${{env.environment_name}}"
          terraform workspace select ${{env.environment_name}} || terraform workspace new ${{env.environment_name}}
          echo "Workspace switched to ${{env.environment_name}}"
      
    - name: Plan Destroy Terraform
      working-directory: Application/Terraform/
      run: |
        echo "Plan Terraform"
          export ARM_CLIENT_ID=${{secrets.AZ_CLIENTID}}
          export ARM_CLIENT_SECRET=${{secrets.AZ_CLIENTSECRET}}
          export ARM_SUBSCRIPTION_ID=${{secrets.AZ_SUBSCRIPTIONID}}
          export ARM_TENANT_ID=${{secrets.AZ_TENANTID}}
          terraform plan -destroy -var-file=${{inputs.Environment}}.tfvars -out=tfplan -input=false
          STATUS=$?
#          if [ $STATUS -eq 0 ]; then echo "Target environment matches to state"; elif [ $STATUS -eq 1 ]; then echo "Error found in terraform plan"; exit 1; elif [ $STATUS -eq 2 ]; then echo "Changes found in target environment"; else echo "Unknown Status returned by terraform"; exit 1;fi
                    
# if [ $STATUS -eq 0 ]; then echo "Target environment matches to state"; elif [ $STATUS -eq 1 ]; then echo "Error found in terraform plan"; exit 1; elif [ $STATUS -eq 2 ]; then echo "Changes found in target environment"; else echo "Unknown Status returned by terraform"; exit 1;fi
    
    - name: Apply Destroy Terraform
      id: terraformApplyStep
      working-directory: Application/Terraform/
      run: |
          echo "Apply Terraform"
          export ARM_CLIENT_ID=${{secrets.AZ_CLIENTID}}
          export ARM_CLIENT_SECRET=${{secrets.AZ_CLIENTSECRET}}
          export ARM_SUBSCRIPTION_ID=${{secrets.AZ_SUBSCRIPTIONID}}
          export ARM_TENANT_ID=${{secrets.AZ_TENANTID}}
          terraform apply -destroy -auto-approve -input=false tfplan
     #     APP_URL=$(terraform output ApplicationURL)
     #     APP_NAME=$(terraform output ApplicationName)
     #     echo App URL $APP_URL
     #     echo App Name $APP_NAME
     #     echo "::set-output name=APP_URL::$APP_URL"
     #     echo "::set-output name=APP_Name::$APP_NAME"

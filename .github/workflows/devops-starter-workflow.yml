name: Deploy ASP.NET Core app to Azure Web App 

on:
  workflow_dispatch:
#  push:
#    branches:
#      - master

env:
  AZURE_WEBAPP_NAME: "cicdpoc-prod"    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: './aspnet-core-dotnet-core'             # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1.x'                  # set this to the dot net version to use
  RESOURCEGROUPNAME: "rg-cicd-poc-mp"
  LOCATION: "Australia Southeast"
  HOSTINGPLANNAME: "asp-cicd-poc-mp"
  APPINSIGHTLOCATION: "Australia Southeast"
  SKU: "S1 Standard"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    # Checkout the repo
    - uses: actions/checkout@master
    
    - name: Creating artifact directories
      run: |
        mkdir buildartifacts
        mkdir deploymenttemplates

    # Setup .NET Core SDK
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }} 
    
    # Run dotnet build and publish
    - name: dotnet build unit test and publish
      run: |
        cd Application
        dotnet restore
        dotnet build --configuration Release
        dotnet test aspnet-core-dotnet-core.UnitTests/aspnet-core-dotnet-core.UnitTests.csproj
        dotnet publish -c Release -o './build'
    - name: archive application
      run: | 
        zip -qq -r ./buildartifacts/Application.zip ./Application/build

    - name: Upload Application to Build Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: buildartifacts
        path: buildartifacts
#    - name: Archive ArmTemplates
#      run: |
#        zip -qq -r ./deploymenttemplates/ArmTemplates.zip ./ArmTemplates

 #   - name: Upload Arm templates to Artifact
 #     continue-on-error: false
 #     uses: actions/upload-artifact@v2
 #     with:
 #       name: deploymenttemplates
 #       path: deploymenttemplates

        
  deployToDev:
    name: Deploy To Development
    needs: build
    runs-on: ubuntu-latest
    environment:
        name: Development
        url: http://cicdpoc-prod.azurewebsites.net/ 
    env:
      Title: Development Environment
    steps:

    - name: Download Build Artifact
      uses: actions/download-artifact@v4.1.7
      continue-on-error: false
      with:
        name: buildartifacts
        path: buildartifacts

    - name: Unzipping Build artifact
      run: |
        unzip -qq ./buildartifacts/Application.zip -d .
    
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Azure key vault - Get Secrets
      uses: Azure/get-keyvault-secrets@v1
      id: GetAzureSecrets
      with:
        # Name of the azure key vault
        keyvault: kv-cicd-poc
        # Name of the secret to be fetched
        secrets: devsecret
    - name: Variable Substitution
      uses: microsoft/variable-substitution@v1
      with:
        # comma separated list of XML/JSON/YAML files in which tokens are to be substituted. Files names must be specified relative to the folder-path.
        files: '**/appsettings.json'
      env:
        SampleConfig.Title: ${{env.Title}}
        SampleConfig.SuperSecret: ${{steps.GetAzureSecrets.outputs.devsecret}}
        
#    - name: Download an ARM template
#      uses: actions/download-artifact@v4.1.7
#      continue-on-error: false
#      with:
#        name: deploymenttemplates
#        path: deploymenttemplates

#    - name: Unzipping ARM artifact
#      run: |
#        unzip -qq ./deploymenttemplates/ArmTemplates.zip -d .

#    - name: Deploy ARM Template
#      uses: azure/CLI@v1
#      continue-on-error: false
#      with:
#        inlineScript: |
          # az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          # az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}"

    - name: 'Deploy web app'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: './Application/build'

  deployToTest:
    name: Deploy To Test
    needs: deployToDev
    runs-on: ubuntu-latest
    environment:
        name: Test
        url: http://cicdpoc-prod.azurewebsites.net/
    env:
      Title: Test Environment
    steps:

    - name: Download Build Artifact
      uses: actions/download-artifact@v4.1.7
      continue-on-error: false
      with:
        name: buildartifacts
        path: buildartifacts

    - name: Unzipping Build artifact
      run: |
        unzip -qq ./buildartifacts/Application.zip -d .
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Azure key vault - Get Secrets
      uses: Azure/get-keyvault-secrets@v1
      id: GetAzureSecrets
      with:
        # Name of the azure key vault
        keyvault: kv-cicd-poc
        # Name of the secret to be fetched
        secrets: testsecret
    - name: Variable Substitution
      uses: microsoft/variable-substitution@v1
      with:
        # comma separated list of XML/JSON/YAML files in which tokens are to be substituted. Files names must be specified relative to the folder-path.
        files: '**/appsettings.json'
      env:
        SampleConfig.Title: ${{env.Title}}
        SampleConfig.SuperSecret: ${{steps.GetAzureSecrets.outputs.testsecret}}


#    - name: Download an ARM template
#      uses: actions/download-artifact@v4.1.7
#      continue-on-error: false
#      with:
#        name: deploymenttemplates
#        path: deploymenttemplates

#    - name: Unzipping ARM artifact
#      run: |
#        unzip -qq ./deploymenttemplates/ArmTemplates.zip -d .

#    - name: Deploy ARM Template
#      uses: azure/CLI@v1
#      continue-on-error: false
#      with:
#        inlineScript: |
          # az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          # az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}"

    - name: 'Deploy web app'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: './Application/build'
      
  deployToProduction:
    name: Deploy To Production
    needs: deployToTest  
    runs-on: ubuntu-latest
    environment:
        name: Production
        url: http://cicdpoc-prod.azurewebsites.net/
    env:
      Title: Prod Environment
    steps:

    - name: Download Build Artifact
      uses: actions/download-artifact@v4.1.7
      continue-on-error: false
      with:
        name: buildartifacts
        path: buildartifacts

    - name: Unzipping Build artifact
      run: |
        unzip -qq ./buildartifacts/Application.zip -d .
    
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Azure key vault - Get Secrets
      uses: Azure/get-keyvault-secrets@v1
      id: GetAzureSecrets
      with:
        # Name of the azure key vault
        keyvault: kv-cicd-poc
        # Name of the secret to be fetched
        secrets: prodsecret
    - name: Variable Substitution
      uses: microsoft/variable-substitution@v1
      with:
        # comma separated list of XML/JSON/YAML files in which tokens are to be substituted. Files names must be specified relative to the folder-path.
        files: '**/appsettings.json'
      env:
        SampleConfig.Title: ${{env.Title}}
        SampleConfig.SuperSecret: ${{steps.GetAzureSecrets.outputs.prodsecret}}


#    - name: Download an ARM template
#      uses: actions/download-artifact@v4.1.7
#      continue-on-error: false
#      with:
#        name: deploymenttemplates
#        path: deploymenttemplates

#    - name: Unzipping ARM artifact
#      run: |
#        unzip -qq ./deploymenttemplates/ArmTemplates.zip -d .

    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
#    - name: Deploy ARM Template
#      uses: azure/CLI@v1
#      continue-on-error: false
#      with:
#        inlineScript: |
          # az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          # az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}"

    - name: 'Deploy web app'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: './Application/build'
      
  FunctionalTests:
    name: Functional tests
    runs-on: windows-latest
    needs: deployToDev
    steps:

    - uses: actions/checkout@master

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }} 

    - name: update web app url in Run Settings
      shell: powershell
      run: |
        cd Application\aspnet-core-dotnet-core.FunctionalTests
        [xml]$runSetting = Get-Content functionalTests.runsettings
        $runSetting.RunSettings.TestRunParameters.ChildNodes.Item(0).value = 'https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/'
        $runSetting.Save("$(pwd)/functionalTests.runsettings")

    - name: Run tests
      continue-on-error: false
      run: |
        cd Application\aspnet-core-dotnet-core.FunctionalTests
        dotnet test aspnet-core-dotnet-core.FunctionalTests.csproj -s functionalTests.runsettings
